import java.io.File;
import java.io.FileNotFoundException;
import java.util.ArrayList;
import java.util.Scanner;

public class Graph {

    //number of vertices 
    private int verticesNo;
    //number of edges 
    private int edgeNo;
    private boolean isDigraph = false;
    private Path adjMatrix[][];
    private ArrayList<Router> vertices = new ArrayList<Router>();
    private boolean isChar = false;
    

    public Graph() {
    }

    public Graph(int verticesNo, int edgeNo) {
        this.verticesNo = verticesNo;
        this.edgeNo = 0;
        //initialize adjMatrix with vertices and edge
        adjMatrix = new Path[verticesNo][verticesNo];
        //null all the adjMatrix
        for (Path[] adjMatrix1 : adjMatrix) {
            for (int j = 0; j < adjMatrix1.length; j++) {
                adjMatrix1[j] = null;
            }
        }
    }

    
    //for int
    public Path addEdge(int v, int u, int w) {
        Path e1, e2;
        Router f = new Router(v);
        addVertLabelI(f);
        Router t = new Router(u);
        addVertLabelI(t);
        e1 = new Path(f, t, w);
        adjMatrix[v][u] = e1;
        edgeNo++;
        if (isDigraph == false) {
            e2 = new Path(t, f, w);
            adjMatrix[u][v] = e2;
            edgeNo++;
        }
        return e1;
    }

    //for char graph
    public Path addEdge(char v, char u, int w) {
        Path p1;
        Router f = new Router(v);
        addVertLabelc(f);
        Router t = new Router(u);
        addVertLabelc(t);
        p1 = new Path(f, t, w);
        adjMatrix[f.getPosition()][t.getPosition()] = p1; 
        edgeNo++;
        return p1;
    }

   //for char
    public boolean addVertLabelc(Router v) {
        for (int i = 0; i < vertices.size(); i++) {
            if (v.getLabel() == vertices.get(i).getLabel()) {
                return false;
            }
        }
        vertices.add(v);
        verticesNo++;
        return true;
    }

   //for integer
    public boolean addVertLabelI(Router v) {
        for (int i = 0; i < vertices.size(); i++) {
            if (v.getLabelI() == vertices.get(i).getLabelI()) {
                return false;
            }
        }
        vertices.add(v);
        verticesNo++;
        return true;
    }

    
    
    //creat a random graph
    public Graph makeGraph(int verticesNo, int edgeNo) {
        Graph g = new Graph(verticesNo, edgeNo);
        int randomv, randomu, w = (int) (Math.random() * 20 + 1), leftEdge = 0;

        // loop for random verices with random edges
        for (int i = 0; i < verticesNo; i++) {

            randomv = (int) (Math.random() * verticesNo);
            randomu = (int) (Math.random() * verticesNo);


            if (g.getAdjMatrix()[randomv][randomu] != null || randomv == randomu) {
                i--;
            }
            else {
                //set a random waight 
                w = (int) (Math.random() * 20 + 1);
                // create a path 
                g.addEdge(randomv, randomu, w);
                g.getAdjMatrix()[randomv][randomu].getSource().setIsVisited(true);
                g.getAdjMatrix()[randomv][randomu].getTarget().setIsVisited(true);
            }  
            leftEdge = edgeNo - g.edgeNo;

        }
        
        // connect
        int isConnect = isConnected(vertices);
        // not visited
        if (isConnect > -1) {
            //not Visited router
            for (int i = 0; i < g.getAdjMatrix().length; i++) {
                if (i == isConnect) {
                    for (int j = 0; j < g.getAdjMatrix()[i].length; j++) {
                        if (g.getAdjMatrix()[i][j] == null) {
                            g.getAdjMatrix()[i][j] = g.addEdge(i, j, w);
                            g.edgeNo++;
                        }
                    }
                } 
                else {
                    //leftover
                    if (g.getAdjMatrix()[i][isConnect] == null) {
                        g.getAdjMatrix()[i][isConnect] = g.addEdge(i, isConnect, w);
                        g.edgeNo++;
                    }
                    break;
                }
            }   
            leftEdge = edgeNo - g.edgeNo;
        }

        //Leftover edges
        for (int i = 0; i < leftEdge; i++) {
            //random Router
            randomv = (int) (Math.random() * verticesNo);
            randomu = (int) (Math.random() * verticesNo);

            if (g.getAdjMatrix()[randomv][randomu] != null || randomv == randomu) {
                i--;
            }
            else {
                //random waight 
                w = (int) (Math.random() * 20 + 1);
                g.addEdge(randomv, randomu, w); 
                g.getAdjMatrix()[randomv][randomu].getSource().setIsVisited(true);
                g.getAdjMatrix()[randomv][randomu].getTarget().setIsVisited(true);
            }
        }
        return g;
    }

    public int isConnected(ArrayList<Router> vertices) {
       //all routers
        int count = 0;
        //visited or not
        boolean coneccted[] = new boolean[vertices.size()];
        for (int i = 0; i < vertices.size(); i++) {
            if (vertices.get(i).getIsVisited() == true) {
                coneccted[i] = true;
            }
        }
        //check for visited router
        if (vertices.size() == count) {
            for (int i = 0; i < vertices.size(); i++) {
                if (coneccted[i] == false) {
                    return i;
                }
            }
        }
        return -1;
    }
 
    
    //read from the graph from the file
   public Graph readGraphFromFile(File file) throws FileNotFoundException {
        if (file.exists()) {
            Scanner input = new Scanner(file);
            String check = input.next();
            int dia = input.nextInt();
            int verticesN = input.nextInt();
            int edgesN = input.nextInt();
            Graph g = new Graph(verticesN, edgesN);

            if (dia == 1) {
                g.setIsDigraph(true);
            }
            // loop to red the rest of the file
            while (input.hasNextLine()) {
                char v = input.next().charAt(0);
                char u = input.next().charAt(0);
                int w = input.nextInt();
                g.addEdge(v, u, w);
            }
            g.setIsChar(true);
            return g;
        } else {
            //if No print msg and return null
            System.out.println("File dose not exist");
            return null;
        }
    }

    public int getVerticesNo() {
        return verticesNo;
    }

    public void setVerticesNo(int verticesNo) {
        this.verticesNo = verticesNo;
    }

    public int getEdgeNo() {
        return edgeNo;
    }

    public void setEdgeNo(int edgeNo) {
        this.edgeNo = edgeNo;
    }

    public boolean getIsDigraph() {
        return isDigraph;
    }

    public void setIsDigraph(boolean isDigraph) {
        this.isDigraph = isDigraph;
    }

    public Path[][] getAdjMatrix() {
        return adjMatrix;
    }

    public void setAdjMatrix(Path[][] adjMatrix) {
        this.adjMatrix = adjMatrix;
    }

    public ArrayList<Router> getVertices() {
        return vertices;
    }

    public void setVertices(ArrayList<Router> vertices) {
        this.vertices = vertices;
    }

    public boolean isIsChar() {
        return isChar;
    }

    public void setIsChar(boolean isChar) {
        this.isChar = isChar;
    }

}
